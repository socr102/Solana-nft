{"ast":null,"code":"var _jsxFileName = \"E:\\\\Git\\\\Solana-nft\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport './App.css'; // Constants\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  _s();\n\n  /*\r\n  * This function holds the logic for deciding if a Phantom Wallet is\r\n  * connected or not\r\n  */\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        solana\n      } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('phantom wallet found!');\n          /*\r\n          * The solana object gives us a function that will allow us to connect\r\n          * directly with the user's wallet!\r\n          */\n\n          const response = await solana.connect({\n            onlyIfTrusted: true\n          });\n          console.log('Connected with Public key:', response.publicKey.toString());\n        }\n      } else {\n        alert('solana object not found! Get a Phantom wallet');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  /*\r\n  * Let's define this method so our code doesn't break.\r\n  * We will write the logic for this next!\r\n  */\n\n\n  const connectWallet = async () => {};\n  /*\r\n  * We want to render this UI when the user hasn't connected\r\n  * their wallet to our app yet.\r\n  */\n\n  /*\r\n  * When our component first mounts, let's check to see if we have a connected\r\n  * Phantom Wallet\r\n  */\n\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header\",\n          children: \"\\uD83D\\uDDBC GIF Portal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"View your GIF collection in the metaverse \\u2728\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built on @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["E:/Git/Solana-nft/src/App.js"],"names":["React","useEffect","TWITTER_HANDLE","TWITTER_LINK","App","checkIfWalletIsConnected","solana","window","isPhantom","console","log","response","connect","onlyIfTrusted","publicKey","toString","alert","error","connectWallet","onLoad","addEventListener","removeEventListener","twitterLogo"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;AAEA,OAAO,WAAP,C,CAEA;;;AACA,MAAMC,cAAc,GAAG,aAAvB;AACA,MAAMC,YAAY,GAAI,uBAAsBD,cAAe,EAA3D;;AAEA,MAAME,GAAG,GAAG,MAAM;AAAA;;AACf;AACH;AACA;AACA;AACE,QAAMC,wBAAwB,GAAG,YAAY;AAC3C,QAAI;AACF,YAAM;AAAEC,QAAAA;AAAF,UAAaC,MAAnB;;AAEA,UAAID,MAAJ,EAAY;AACV,YAAIA,MAAM,CAACE,SAAX,EAAsB;AACpBC,UAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA;AACV;AACA;AACA;;AACU,gBAAMC,QAAQ,GAAG,MAAML,MAAM,CAACM,OAAP,CAAe;AAACC,YAAAA,aAAa,EAAE;AAAhB,WAAf,CAAvB;AACAJ,UAAAA,OAAO,CAACC,GAAR,CACE,4BADF,EAEEC,QAAQ,CAACG,SAAT,CAAmBC,QAAnB,EAFF;AAID;AACF,OAbD,MAaM;AACFC,QAAAA,KAAK,CAAC,+CAAD,CAAL;AACD;AACJ,KAnBD,CAmBE,OAAOC,KAAP,EAAc;AACdR,MAAAA,OAAO,CAACQ,KAAR,CAAcA,KAAd;AACD;AACF,GAvBD;AAwBE;AACJ;AACA;AACA;;;AACE,QAAMC,aAAa,GAAG,YAAW,CAAE,CAAnC;AACE;AACJ;AACA;AACA;;AACI;AACJ;AACA;AACA;;;AACEjB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMkB,MAAM,GAAG,YAAY;AACzB,YAAMd,wBAAwB,EAA9B;AACD,KAFD;;AAGAE,IAAAA,MAAM,CAACa,gBAAP,CAAwB,MAAxB,EAAgCD,MAAhC;AACA,WAAO,MAAMZ,MAAM,CAACc,mBAAP,CAA2B,MAA3B,EAAmCF,MAAnC,CAAb;AACD,GANQ,EAMN,EANM,CAAT;AAQA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,gCACE;AAAG,UAAA,SAAS,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAG,UAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAOE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,gCACE;AAAK,UAAA,GAAG,EAAC,cAAT;AAAwB,UAAA,SAAS,EAAC,cAAlC;AAAiD,UAAA,GAAG,EAAEG;AAAtD;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AACE,UAAA,SAAS,EAAC,aADZ;AAEE,UAAA,IAAI,EAAEnB,YAFR;AAGE,UAAA,MAAM,EAAC,QAHT;AAIE,UAAA,GAAG,EAAC,YAJN;AAAA,oBAKG,aAAYD,cAAe;AAL9B;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD,CAvED;;GAAME,G;;KAAAA,G;AAyEN,eAAeA,GAAf","sourcesContent":["import React, {useEffect} from 'react';\r\nimport twitterLogo from './assets/twitter-logo.svg';\r\nimport './App.css';\r\n\r\n// Constants\r\nconst TWITTER_HANDLE = '_buildspace';\r\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\r\n\r\nconst App = () => {\r\n   /*\r\n   * This function holds the logic for deciding if a Phantom Wallet is\r\n   * connected or not\r\n   */\r\n  const checkIfWalletIsConnected = async () => {\r\n    try {\r\n      const { solana } = window;\r\n\r\n      if (solana) {\r\n        if (solana.isPhantom) {\r\n          console.log('phantom wallet found!');\r\n          /*\r\n         * The solana object gives us a function that will allow us to connect\r\n         * directly with the user's wallet!\r\n         */\r\n          const response = await solana.connect({onlyIfTrusted: true});\r\n          console.log(\r\n            'Connected with Public key:',\r\n            response.publicKey.toString()\r\n          );\r\n        } \r\n      }else {\r\n          alert('solana object not found! Get a Phantom wallet');\r\n        }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n    /*\r\n   * Let's define this method so our code doesn't break.\r\n   * We will write the logic for this next!\r\n   */\r\n  const connectWallet = async() => {};\r\n    /*\r\n   * We want to render this UI when the user hasn't connected\r\n   * their wallet to our app yet.\r\n   */\r\n    /*\r\n   * When our component first mounts, let's check to see if we have a connected\r\n   * Phantom Wallet\r\n   */\r\n  useEffect(() => {\r\n    const onLoad = async () => {\r\n      await checkIfWalletIsConnected();\r\n    };\r\n    window.addEventListener('load', onLoad);\r\n    return () => window.removeEventListener('load', onLoad);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container\">\r\n        <div className=\"header-container\">\r\n          <p className=\"header\">ðŸ–¼ GIF Portal</p>\r\n          <p className=\"sub-text\">\r\n            View your GIF collection in the metaverse âœ¨\r\n          </p>\r\n        </div>\r\n        <div className=\"footer-container\">\r\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\r\n          <a\r\n            className=\"footer-text\"\r\n            href={TWITTER_LINK}\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n          >{`built on @${TWITTER_HANDLE}`}</a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}