{"ast":null,"code":"var _jsxFileName = \"C:\\\\Git\\\\Solana-nft\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport './App.css'; // Constants\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst TEST_GIFS = ['https://i.giphy.com/media/eIG0HfouRQJQr1wBzz/giphy.webp', 'https://media3.giphy.com/media/L71a8LW2UrKwPaWNYM/giphy.gif?cid=ecf05e47rr9qizx2msjucl1xyvuu47d7kf25tqt2lvo024uo&rid=giphy.gif&ct=g', 'https://media4.giphy.com/media/AeFmQjHMtEySooOc8K/giphy.gif?cid=ecf05e47qdzhdma2y3ugn32lkgi972z9mpfzocjj6z1ro4ec&rid=giphy.gif&ct=g', 'https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp'];\n\nconst App = () => {\n  _s();\n\n  //state\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n  /*\n  * This function holds the logic for deciding if a Phantom Wallet is\n  * connected or not\n  */\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        solana\n      } = window;\n\n      if (solana) {\n        /*\n        * The solana object gives us a function that will allow us to connect\n        * directly with the user's wallet!\n        */\n        const response = await solana.connect();\n        console.log('Connected with Public key:', response.publicKey.toString());\n        setWalletAddress(response.publicKey.toString());\n      } else {\n        alert('solana object not found! Get a Phantom wallet');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  /*\n  * Let's define this method so our code doesn't break.\n  * We will write the logic for this next!\n  */\n\n\n  const connectWallet = async () => {};\n\n  const onInputChange = event => {\n    const {\n      value\n    } = event.target;\n    setInputValue(value);\n  };\n\n  const sendGif = async () => {\n    if (inputValue.length > 0) {\n      console.log(\"Gif link:\", inputValue);\n      setGifList([...gifList, inputValue]);\n      setInputValue('');\n    } else {\n      console.log(\"Empty input. Try again.\");\n    }\n  };\n  /*\n  * We want to render this UI when the user hasn't connected\n  * their wallet to our app yet.\n  */\n\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"cta-button connect-wallet-button\",\n    onClick: connectWallet,\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n\n  const renderConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"connected-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: event => {\n        event.preventDefault();\n        sendGif();\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter gif line!\",\n        value: inputValue,\n        onChange: onInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"cta-button submit-gif-button\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gif-grid\",\n      children: gifList.map(gif => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gif-item\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: gif,\n          alt: gif\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this)\n      }, gif, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n  /*\n  * When our component first mounts, let's check to see if we have a connected\n  * Phantom Wallet\n  */\n\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list...'); //call Solana program here\n      //Set state\n\n      setGifList(TEST_GIFS);\n    }\n  }, [walletAddress]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: walletAddress ? 'authed-container' : 'container',\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header\",\n          children: \"\\uD83D\\uDDBC GIF Portal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"View your GIF collection in the metaverse \\u2728\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), !walletAddress && renderNotConnectedContainer(), walletAddress && renderConnectedContainer()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built on @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"GUp0OLdI+EDuCRRqm+ZLCxBP30A=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Git/Solana-nft/src/App.js"],"names":["React","useEffect","useState","TWITTER_HANDLE","TWITTER_LINK","TEST_GIFS","App","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","solana","window","response","connect","console","log","publicKey","toString","alert","error","connectWallet","onInputChange","event","value","target","sendGif","length","renderNotConnectedContainer","renderConnectedContainer","preventDefault","map","gif","onLoad","addEventListener","removeEventListener","twitterLogo"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\n\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst TEST_GIFS = [\n\t'https://i.giphy.com/media/eIG0HfouRQJQr1wBzz/giphy.webp',\n\t'https://media3.giphy.com/media/L71a8LW2UrKwPaWNYM/giphy.gif?cid=ecf05e47rr9qizx2msjucl1xyvuu47d7kf25tqt2lvo024uo&rid=giphy.gif&ct=g',\n\t'https://media4.giphy.com/media/AeFmQjHMtEySooOc8K/giphy.gif?cid=ecf05e47qdzhdma2y3ugn32lkgi972z9mpfzocjj6z1ro4ec&rid=giphy.gif&ct=g',\n\t'https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp'\n]\n\nconst App = () => {\n  //state\n  const[walletAddress, setWalletAddress] = useState(null);\n  const[inputValue, setInputValue] = useState('');\n  const[gifList, setGifList] = useState([]);\n   /*\n   * This function holds the logic for deciding if a Phantom Wallet is\n   * connected or not\n   */\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n          /*\n         * The solana object gives us a function that will allow us to connect\n         * directly with the user's wallet!\n         */\n          const response = await solana.connect();\n          console.log('Connected with Public key:',response.publicKey.toString()\n          );\n          setWalletAddress(response.publicKey.toString());\n      }else {\n          alert('solana object not found! Get a Phantom wallet');\n        }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n    /*\n   * Let's define this method so our code doesn't break.\n   * We will write the logic for this next!\n   */\n  const connectWallet = async() => {};\n\n  const onInputChange = (event) => {\n    const {value} = event.target;\n    setInputValue(value);\n  }\n\n  const sendGif = async() => {\n    if (inputValue.length > 0){\n      console.log(\"Gif link:\", inputValue);\n      setGifList([...gifList, inputValue]);\n      setInputValue('');\n    } else {\n      console.log(\"Empty input. Try again.\")\n    }\n  }\n    /*\n   * We want to render this UI when the user hasn't connected\n   * their wallet to our app yet.\n   */\n  const renderNotConnectedContainer = () => (\n    <button\n      className = \"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n  const renderConnectedContainer = () => (\n    <div className=\"connected-container\">\n      <form\n        onSubmit={(event) => {\n          event.preventDefault();\n          sendGif();\n        }}\n      >\n        <input \n        type='text' \n        placeholder=\"Enter gif line!\"\n        value={inputValue}\n        onChange={onInputChange}\n        />\n        <button type=\"submit\" className='cta-button submit-gif-button'>Submit</button>\n      </form>\n      <div className='gif-grid'>\n        {gifList.map(gif => (\n          <div className='gif-item' key={gif}>\n            <img src={gif} alt={gif}/>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n    /*\n   * When our component first mounts, let's check to see if we have a connected\n   * Phantom Wallet\n   */\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n\n  useEffect(() => {\n    if(walletAddress) {\n      console.log('Fetching GIF list...');\n      //call Solana program here\n      //Set state\n      setGifList(TEST_GIFS);\n    }\n  },[walletAddress]);\n\n  return (\n    <div className=\"App\">\n      <div className={walletAddress ? 'authed-container': 'container'}>\n        <div className=\"header-container\">\n          <p className=\"header\">🖼 GIF Portal</p>\n          <p className=\"sub-text\">\n            View your GIF collection in the metaverse ✨\n          </p>\n          {!walletAddress && renderNotConnectedContainer()}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}